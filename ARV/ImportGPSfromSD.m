function gps=ImportGPSfromSD(datfilename)
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%
% function gps=ImportGPSfromSD(datfilename)
%
% General function to import GPS data from text file made by Ardruino
% gps logger (http://www.adafruit.com/products/1272). Script was auto-
% generated by MATLAB import tool, then modified.
%
% Text file made using instructions and code at
% https://learn.adafruit.com/adafruit-ultimate-gps-logger-shield
%
% Columns in file (for $GPRMC strings):
% 1) NMEA code ($GPRMC)
% 2) Status code ('V'=void, 'A'=active)
% 3) Lat
% 5) Lat direction (N/S)
% 6) Lon
% 7) Lon direction (E/W)
% 8) Speed [kts]
% 9) Heading [deg] (from gps locations, NOT compass, so only good when moving ~straight)
%10)
%11)
%12)
%
%
% 8 April 2015 - A. Pickering - apickering@coas.oregonstate.edu
%~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
%% Initialize variables.

delimiter = ',';

% Read columns of data as strings:
% For more information, see the TEXTSCAN documentation.
formatSpec = '%s%s%s%s%s%s%s%s%s%s%s%s%s%s%s%[^\n\r]';

% Open the text file.
fileID = fopen(datfilename,'r');

%% Read columns of data according to format string.
% This call is based on the structure of the file used to generate this
% code. If an error occurs for a different file, try regenerating the code
% from the Import Tool.
dataArray = textscan(fileID, formatSpec, 'Delimiter', delimiter,  'ReturnOnError', false);

%% Close the text file.
fclose(fileID);

%% Convert the contents of columns containing numeric strings to numbers.
% Replace non-numeric strings with NaN.
raw = repmat({''},length(dataArray{1}),length(dataArray)-1);
for col=1:length(dataArray)-1
    raw(1:length(dataArray{col}),col) = dataArray{col};
end
numericData = NaN(size(dataArray{1},1),size(dataArray,2));

for col=[8,9,15]
    % Converts strings in the input cell array to numbers. Replaced non-numeric
    % strings with NaN.
    rawData = dataArray{col};
    for row=1:size(rawData, 1);
        % Create a regular expression to detect and remove non-numeric prefixes and
        % suffixes.
        regexstr = '(?<prefix>.*?)(?<numbers>([-]*(\d+[\,]*)+[\.]{0,1}\d*[eEdD]{0,1}[-+]*\d*[i]{0,1})|([-]*(\d+[\,]*)*[\.]{1,1}\d+[eEdD]{0,1}[-+]*\d*[i]{0,1}))(?<suffix>.*)';
        try
            result = regexp(rawData{row}, regexstr, 'names');
            numbers = result.numbers;
            
            % Detected commas in non-thousand locations.
            invalidThousandsSeparator = false;
            if any(numbers==',');
                thousandsRegExp = '^\d+?(\,\d{3})*\.{0,1}\d*$';
                if isempty(regexp(thousandsRegExp, ',', 'once'));
                    numbers = NaN;
                    invalidThousandsSeparator = true;
                end
            end
            % Convert numeric strings to numbers.
            if ~invalidThousandsSeparator;
                numbers = textscan(strrep(numbers, ',', ''), '%f');
                numericData(row, col) = numbers{1};
                raw{row, col} = numbers{1};
            end
        catch %me
        end
    end
end


%% Split data into numeric and cell columns.
% rawNumericColumns = raw(:, [8,15]);
% rawCellColumns = raw(:, [1,2,3,4,5,6,7,9,10,11,12,13,14]);

rawNumericColumns = raw(:, [8,9,15]);
rawCellColumns = raw(:, [1,2,3,4,5,6,7,10,11,12,13,14]);

%% Replace non-numeric cells with NaN
R = cellfun(@(x) ~isnumeric(x) && ~islogical(x),rawNumericColumns); % Find non-numeric cells
rawNumericColumns(R) = {NaN}; % Replace non-numeric cells

clear idg
% only keep the GPRMC lines
%idg=find(strcmp(rawCellColumns(:, 1),' $GPRMC'));
idg=find(strcmp(strtrim(rawCellColumns(:, 1)),'$GPRMC'));
%
rawCellColumns=rawCellColumns(idg,:);
rawNumericColumns=rawNumericColumns(idg,:);


%% Allocate imported array to column variable names
VarName1 = rawCellColumns(:, 1);
gmtTime = rawCellColumns(:, 2);
Status = rawCellColumns(:, 3);
Lat = rawCellColumns(:, 4);
LatDir = rawCellColumns(:, 5);
Lon = rawCellColumns(:, 6);
LonDir = rawCellColumns(:, 7);
Speed = cell2mat(rawNumericColumns(:, 1));
Heading = cell2mat(rawNumericColumns(:, 2));%rawCellColumns(:, 8);
% Date = rawCellColumns(:, 9);
% M = rawCellColumns(:, 10);
% VarName12 = rawCellColumns(:, 11);
% M1 = rawCellColumns(:, 12);
% VarName14 = rawCellColumns(:, 13);
Date = rawCellColumns(:, 8);
M = rawCellColumns(:, 9);
VarName12 = rawCellColumns(:, 10);
M1 = rawCellColumns(:, 11);
VarName14 = rawCellColumns(:, 12);

VarName15 = cell2mat(rawNumericColumns(:, 3));


%% Clear temporary variables
clearvars filename delimiter formatSpec fileID dataArray ans raw col numericData rawData row regexstr result numbers invalidThousandsSeparator thousandsRegExp me rawNumericColumns rawCellColumns R;

%% convert time and date to datenum format

% date is in form 'DDMMYY'
% time is in form 'HHmmss.ss'

gps.dnum=nan*ones(size(Date));
for a=1:length(Date)
    
    clear rawtime rawdate
    rawtime=gmtTime{a};
    rawdate=Date{a};
%    blah=datevec(now);
%    thisyear=blah(1)
    if str2num(rawdate(5:6))==15 % only save data from current year
        gps.dnum(a)=datenum(str2num(['20' rawdate(5:6)]),str2num(rawdate(3:4)),str2num(rawdate(1:2)),str2num(rawtime(1:2)),str2num(rawtime(3:4)),str2num(rawtime(5:10)));
    end
end

%% parse Lat/Lon strings into numbers (decimal degrees)

% Lat string has format 'DDMM.MM' . Note the string is NOT in decimal
% degrees, for example '4522.30' is 45 deg, 22.30 mins
% Lon is 'DDDMM.MM'

gps.declat=nan*ones(size(Date));
gps.declon=nan*ones(size(Date));

for a=1:length(Date)
    
    clear rawlat deglat minlat rawlon deglon minlon
    rawlat=Lat{a};
    if length(rawlat)>1
        
        deglat=rawlat(1:2);
        minlat=rawlat(3:end);
        
        % make decimal lat
        gps.declat(a)=str2num(deglat) + str2num(minlat)/60;
        
        rawlon=Lon{a};
        deglon=rawlon(1:3);
        minlon=rawlon(4:end);
        
        % make decimal lon
        gps.declon(a)=str2num(deglon) + str2num(minlon)/60;
    end
end

%%

gps.Speed=Speed;
gps.Heading=Heading;
gps.MakeInfo=['Made ' datestr(now) ' w/ ' mfilename]
gps.DataSource=datfilename;


%%

figure(1);clf
agutwocolumn(1)
wysiwyg
ax1=subplot(411)
plot(gps.dnum,gps.declat);datetick('x')
ylabel('Latitude')
%title(['Yaquina Bay April 2 2015'])

ax2=subplot(412)
plot(gps.dnum,gps.declon);datetick('x')
ylabel('Longitude')

ax3=subplot(413)
plot(gps.dnum,gps.Speed);datetick('x')
ylabel('Speed [kts]')

ax4=subplot(414)
plot(gps.dnum,gps.Heading,'.');datetick('x')
ylabel('Heading [^o]')
xlabel(['Time on ' datestr(floor(nanmean(gps.dnum)))])
%
linkaxes([ax1 ax2 ax3 ax4],'x')

return
%%