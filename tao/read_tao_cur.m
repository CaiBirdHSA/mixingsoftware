function cur=read_tao_cur(fname)
% read_tao_cur.m
% create mat files from fixed depth current meters ASCII data
% $Revision: 1.8 $ $Date: 2012/05/31 23:40:32 $ $Author: aperlin $	
% Originally A. Perlin
%
% updated by S. Warner in June 2014 to be able to read the new ascii files
% generated by the new TAO download results

fid=fopen(fname,'r');
qlt=strvcat('Data Quality Codes(Q):',...
'0 = unknown',...
'1 = good data',...
'2 = probably good data',...
'3 = questionable data',...
'4 = bad data',...
'5 = adjusted data',...
'9 = missing data');
srs=strvcat('Data Mode Codes(M):',...
'R = real-time data',...
'P = provisional data',...
'D = delayed mode data',...
'M = mixed real-time and delayed mode data');
dd=textscan(fid,'%s',2,'delimiter','\r\n');
a=char(dd{:});
ik=find(a(1,:)=='(');
cur.readme=strvcat('Fixed Depth Currents',' ',a(1,:),a(2,:),' ',qlt,srs);
% ib=find(a(1,:)==',');
% nblocks=str2num(a(1,ib(2)+1:ib(2)+4));
ik=find(a(1,:)==',');
ik2 = find(a(1,:) == ')');
nblocks=str2num(a(1,ik+1:ik2-12));
bb='';
for i=1:nblocks
    dd=textscan(fid,'%s',3,'delimiter','\r\n');
    a=char(dd{:});

	ik=find(a(1,:)=='(');
    ikc = find(a(1,:)==',');
    nlines=str2num(a(1,ik+1:ikc-11));

    iks=strfind(a(2,:),'s)');
    ikk=min(strfind(a(2,:),'Quality'));
    if isempty(ikk)
        depth=str2num(a(2,iks+2:end));
    else
        depth=str2num(a(2,iks+2:ikk-1));
    end
    cur(i).depth=unique(depth);
    nvar=length(depth)/length(cur(i).depth);
    
    
    frm='';
    for ii=1:nvar*length(cur(i).depth)
        frm=[frm ' %f'];
    end
% %     sdmid=findstr(a(4,:),'SDMID');
% %     sdmi=findstr(a(4,:),'SDMI');
% %     sdm=findstr(a(4,:),'SDM');
% %     src=[];instr=[];
% %     if ~isempty(sdmid)
% %         fac=5;
% %     elseif ~isempty(sdmi)
% %         fac=4;
% %     elseif ~isempty(sdm)
% %         fac=3;
% %     else
% %         fac=2;
% %         src=strfind(a(3,:),'SOURCE');
% %         instr=strfind(a(3,:),'INSTRUMENT');
% %     end
    fac = nvar;
  
    lstr=length(cur(i).depth)*fac;
%     if isempty(src) && isempty(instr)
%         tmp=textscan(fid,['%s %s' frm ' %' num2str(lstr) 'c'],nlines);
%     elseif ~isempty(src) && isempty(instr)
%         tmp=textscan(fid,['%s %s' frm ' %' num2str(lstr) 'c' ' %' num2str(lstr/2) 'c'],nlines);
%     elseif isempty(src) && ~isempty(instr)
        tmp=textscan(fid,['%s %s' frm ' %' num2str(lstr) 'c' ' %' num2str(lstr) 'c'],nlines);
%     else
%         tmp=textscan(fid,['%s %s' frm ' %' num2str(lstr) 'c' ' %' num2str(lstr/2) 'c' ' %' num2str(lstr) 'c'],nlines);
%     end    

%     secs=strfind(a(4,:),'SS');
    secs=strfind(a(3,:),'SS');
    if ~isempty(secs)
        cur(i).time=datenum([char(tmp{1}) char(tmp{2})],'yyyymmddHHMMSS');
    else
       cur(i).time=datenum([char(tmp{1}) char(tmp{2})],'yyyymmddHHMM');
    end
    for ii=1:length(cur(i).depth)
        cur(i).u(:,ii)=tmp{2+ii*nvar-nvar+1}/100;
        cur(i).v(:,ii)=tmp{2+ii*nvar-nvar+2}/100;
    end
    cur(i).u(cur(i).u<-9)=NaN;
    cur(i).v(cur(i).v<-9)=NaN;
    
    
    %%%%% start here...
    qq=char(tmp{end-1});
    mm=char(tmp{end});
    for ii=1:length(cur(i).depth)
        qqtmp=qq(:,ii*fac-fac+1:ii*fac);
        mmtmp=mm(:,ii*fac-fac+1:ii*fac);

        cur(i).quality(:,ii)=str2num(qqtmp(:,1));
        cur(i).mode(:,ii)=char(mmtmp(:,1));
    end
    
    
    
   dd=textscan(fid,'%s',1,'delimiter','\r\n');
   bb=char(dd{1});
end
fclose(fid);
id=find(fname=='.');
save(fname(1:id-1),'cur')
